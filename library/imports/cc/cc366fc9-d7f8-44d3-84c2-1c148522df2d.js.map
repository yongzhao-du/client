{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "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",
  "file": "unknown",
  "sourcesContent": [
    "//     (c) 2012-2016 Airbnb, Inc.\n//\n//     polyglot.js may be freely distributed under the terms of the BSD\n//     license. For all licensing information, details, and documention:\n//     http://airbnb.github.com/polyglot.js\n//\n//\n// Polyglot.js is an I18n helper library written in JavaScript, made to\n// work both in the browser and in Node. It provides a simple solution for\n// interpolation and pluralization, based off of Airbnb's\n// experience adding I18n functionality to its Backbone.js and Node apps.\n//\n// Polylglot is agnostic to your translation backend. It doesn't perform any\n// translation; it simply gives you a way to manage translated phrases from\n// your client- or server-side JavaScript application.\n//\n\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], function() {\n      return factory(root);\n    });\n  } else if (typeof exports === 'object') {\n    module.exports = factory(root);\n  } else {\n    root.Polyglot = factory(root);\n  }\n}(typeof global !== 'undefined' ? global : this, function(root) {\n  'use strict';\n\n  var replace = String.prototype.replace;\n\n  // ### Polyglot class constructor\n  function Polyglot(options) {\n    options = options || {};\n    this.phrases = {};\n    this.extend(options.phrases || {});\n    this.currentLocale = options.locale || 'en';\n    this.allowMissing = !!options.allowMissing;\n    this.warn = options.warn || warn;\n  }\n\n  // ### Version\n  Polyglot.VERSION = '1.0.0';\n\n  // ### polyglot.locale([locale])\n  //\n  // Get or set locale. Internally, Polyglot only uses locale for pluralization.\n  Polyglot.prototype.locale = function(newLocale) {\n    if (newLocale) this.currentLocale = newLocale;\n    return this.currentLocale;\n  };\n\n  // ### polyglot.extend(phrases)\n  //\n  // Use `extend` to tell Polyglot how to translate a given key.\n  //\n  //     polyglot.extend({\n  //       \"hello\": \"Hello\",\n  //       \"hello_name\": \"Hello, %{name}\"\n  //     });\n  //\n  // The key can be any string.  Feel free to call `extend` multiple times;\n  // it will override any phrases with the same key, but leave existing phrases\n  // untouched.\n  //\n  // It is also possible to pass nested phrase objects, which get flattened\n  // into an object with the nested keys concatenated using dot notation.\n  //\n  //     polyglot.extend({\n  //       \"nav\": {\n  //         \"hello\": \"Hello\",\n  //         \"hello_name\": \"Hello, %{name}\",\n  //         \"sidebar\": {\n  //           \"welcome\": \"Welcome\"\n  //         }\n  //       }\n  //     });\n  //\n  //     console.log(polyglot.phrases);\n  //     // {\n  //     //   'nav.hello': 'Hello',\n  //     //   'nav.hello_name': 'Hello, %{name}',\n  //     //   'nav.sidebar.welcome': 'Welcome'\n  //     // }\n  //\n  // `extend` accepts an optional second argument, `prefix`, which can be used\n  // to prefix every key in the phrases object with some string, using dot\n  // notation.\n  //\n  //     polyglot.extend({\n  //       \"hello\": \"Hello\",\n  //       \"hello_name\": \"Hello, %{name}\"\n  //     }, \"nav\");\n  //\n  //     console.log(polyglot.phrases);\n  //     // {\n  //     //   'nav.hello': 'Hello',\n  //     //   'nav.hello_name': 'Hello, %{name}'\n  //     // }\n  //\n  // This feature is used internally to support nested phrase objects.\n  Polyglot.prototype.extend = function(morePhrases, prefix) {\n    var phrase;\n\n    for (var key in morePhrases) {\n      if (morePhrases.hasOwnProperty(key)) {\n        phrase = morePhrases[key];\n        if (prefix) key = prefix + '.' + key;\n        if (typeof phrase === 'object') {\n          this.extend(phrase, key);\n        } else {\n          this.phrases[key] = phrase;\n        }\n      }\n    }\n  };\n\n  // ### polyglot.unset(phrases)\n  // Use `unset` to selectively remove keys from a polyglot instance.\n  //\n  //     polyglot.unset(\"some_key\");\n  //     polyglot.unset({\n  //       \"hello\": \"Hello\",\n  //       \"hello_name\": \"Hello, %{name}\"\n  //     });\n  //\n  // The unset method can take either a string (for the key), or an object hash with\n  // the keys that you would like to unset.\n  Polyglot.prototype.unset = function(morePhrases, prefix) {\n    var phrase;\n\n    if (typeof morePhrases === 'string') {\n      delete this.phrases[morePhrases];\n    } else {\n      for (var key in morePhrases) {\n        if (morePhrases.hasOwnProperty(key)) {\n          phrase = morePhrases[key];\n          if (prefix) key = prefix + '.' + key;\n          if (typeof phrase === 'object') {\n            this.unset(phrase, key);\n          } else {\n            delete this.phrases[key];\n          }\n        }\n      }\n    }\n  };\n\n  // ### polyglot.clear()\n  //\n  // Clears all phrases. Useful for special cases, such as freeing\n  // up memory if you have lots of phrases but no longer need to\n  // perform any translation. Also used internally by `replace`.\n  Polyglot.prototype.clear = function() {\n    this.phrases = {};\n  };\n\n  // ### polyglot.replace(phrases)\n  //\n  // Completely replace the existing phrases with a new set of phrases.\n  // Normally, just use `extend` to add more phrases, but under certain\n  // circumstances, you may want to make sure no old phrases are lying around.\n  Polyglot.prototype.replace = function(newPhrases) {\n    this.clear();\n    this.extend(newPhrases);\n  };\n\n\n  // ### polyglot.t(key, options)\n  //\n  // The most-used method. Provide a key, and `t` will return the\n  // phrase.\n  //\n  //     polyglot.t(\"hello\");\n  //     => \"Hello\"\n  //\n  // The phrase value is provided first by a call to `polyglot.extend()` or\n  // `polyglot.replace()`.\n  //\n  // Pass in an object as the second argument to perform interpolation.\n  //\n  //     polyglot.t(\"hello_name\", {name: \"Spike\"});\n  //     => \"Hello, Spike\"\n  //\n  // If you like, you can provide a default value in case the phrase is missing.\n  // Use the special option key \"_\" to specify a default.\n  //\n  //     polyglot.t(\"i_like_to_write_in_language\", {\n  //       _: \"I like to write in %{language}.\",\n  //       language: \"JavaScript\"\n  //     });\n  //     => \"I like to write in JavaScript.\"\n  //\n  Polyglot.prototype.t = function(key, options) {\n    var phrase, result;\n    options = options == null ? {} : options;\n    // allow number as a pluralization shortcut\n    if (typeof options === 'number') {\n      options = {smart_count: options};\n    }\n    if (typeof this.phrases[key] === 'string') {\n      phrase = this.phrases[key];\n    } else if (typeof options._ === 'string') {\n      phrase = options._;\n    } else if (this.allowMissing) {\n      phrase = key;\n    } else {\n      this.warn('Missing translation for key: \"'+key+'\"');\n      result = key;\n    }\n    if (typeof phrase === 'string') {\n      options = clone(options);\n      result = choosePluralForm(phrase, this.currentLocale, options.smart_count);\n      result = interpolate(result, options);\n    }\n    return result;\n  };\n\n\n  // ### polyglot.has(key)\n  //\n  // Check if polyglot has a translation for given key\n  Polyglot.prototype.has = function(key) {\n    return key in this.phrases;\n  };\n\n\n  // #### Pluralization methods\n  // The string that separates the different phrase possibilities.\n  var delimeter = '||||';\n\n  // Mapping from pluralization group plural logic.\n  var pluralTypes = {\n    chinese:   function(n) { return 0; },\n    german:    function(n) { return n !== 1 ? 1 : 0; },\n    french:    function(n) { return n > 1 ? 1 : 0; },\n    russian:   function(n) { return n % 10 === 1 && n % 100 !== 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2; },\n    czech:     function(n) { return (n === 1) ? 0 : (n >= 2 && n <= 4) ? 1 : 2; },\n    polish:    function(n) { return (n === 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2); },\n    icelandic: function(n) { return (n % 10 !== 1 || n % 100 === 11) ? 1 : 0; }\n  };\n\n  // Mapping from pluralization group to individual locales.\n  var pluralTypeToLanguages = {\n    chinese:   ['fa', 'id', 'ja', 'ko', 'lo', 'ms', 'th', 'tr', 'zh'],\n    german:    ['da', 'de', 'en', 'es', 'fi', 'el', 'he', 'hu', 'it', 'nl', 'no', 'pt', 'sv'],\n    french:    ['fr', 'tl', 'pt-br'],\n    russian:   ['hr', 'ru'],\n    czech:     ['cs', 'sk'],\n    polish:    ['pl'],\n    icelandic: ['is']\n  };\n\n  function langToTypeMap(mapping) {\n    var type, langs, l, ret = {};\n    for (type in mapping) {\n      if (mapping.hasOwnProperty(type)) {\n        langs = mapping[type];\n        for (l in langs) {\n          ret[langs[l]] = type;\n        }\n      }\n    }\n    return ret;\n  }\n\n  // Trim a string.\n  var trimRe = /^\\s+|\\s+$/g;\n  function trim(str){\n    return replace.call(str, trimRe, '');\n  }\n\n  // Based on a phrase text that contains `n` plural forms separated\n  // by `delimeter`, a `locale`, and a `count`, choose the correct\n  // plural form, or none if `count` is `null`.\n  function choosePluralForm(text, locale, count){\n    var ret, texts, chosenText;\n    if (count != null && text) {\n      texts = text.split(delimeter);\n      chosenText = texts[pluralTypeIndex(locale, count)] || texts[0];\n      ret = trim(chosenText);\n    } else {\n      ret = text;\n    }\n    return ret;\n  }\n\n  function pluralTypeName(locale) {\n    var langToPluralType = langToTypeMap(pluralTypeToLanguages);\n    return langToPluralType[locale] || langToPluralType.en;\n  }\n\n  function pluralTypeIndex(locale, count) {\n    return pluralTypes[pluralTypeName(locale)](count);\n  }\n\n  // ### interpolate\n  //\n  // Does the dirty work. Creates a `RegExp` object for each\n  // interpolation placeholder.\n  var dollarRegex = /\\$/g;\n  var dollarBillsYall = '$$$$';\n  function interpolate(phrase, options) {\n    for (var arg in options) {\n      if (arg !== '_' && options.hasOwnProperty(arg)) {\n        // Ensure replacement value is escaped to prevent special $-prefixed\n        // regex replace tokens. the \"$$$$\" is needed because each \"$\" needs to\n        // be escaped with \"$\" itself, and we need two in the resulting output.\n        var replacement = options[arg];\n        if (typeof replacement === 'string') {\n          replacement = replace.call(options[arg], dollarRegex, dollarBillsYall);\n        }\n        // We create a new `RegExp` each time instead of using a more-efficient\n        // string replace so that the same argument can be replaced multiple times\n        // in the same phrase.\n        phrase = replace.call(phrase, new RegExp('%\\\\{'+arg+'\\\\}', 'g'), replacement);\n      }\n    }\n    return phrase;\n  }\n\n  // ### warn\n  //\n  // Provides a warning in the console if a phrase key is missing.\n  function warn(message) {\n    root.console && root.console.warn && root.console.warn('WARNING: ' + message);\n  }\n\n  // ### clone\n  //\n  // Clone an object.\n  function clone(source) {\n    var ret = {};\n    for (var prop in source) {\n      ret[prop] = source[prop];\n    }\n    return ret;\n  }\n\n  return Polyglot;\n}));\n"
  ]
}