{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "AAAA,IAAM,YAAY,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;;AAElC,EAAE,CAAC,KAAK,CAAC;AACL,eAAS,EAAE,CAAC,SAAS;;AAErB,cAAU,EAAE;;;;;;;;;;;AAWR,mBAAW,EAAE,EAAE,CAAC,IAAI;AACpB,oBAAY,EAAE,EAAE,CAAC,IAAI;AACrB,sBAAc,EAAE,EAAE,CAAC,KAAK;KAC3B;;;AAGD,UAAM,EAAE,kBAAY;AAChB,YAAI,CAAC,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;AAC5C,YAAI,CAAC,WAAW,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC;AACpD,YAAI,IAAI,CAAC,WAAW,IAAI,CAAC,EAAE;AACvB,gBAAI,CAAC,WAAW,CAAC,MAAM,GAAG,KAAK,CAAC;AAChC,gBAAI,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC;SAC3B,MAAM;AACH,gBAAI,QAAQ,GAAG,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AAC9C,gBAAI,CAAC,cAAc,CAAC,MAAM,GAAG,QAAQ,CAAC;SACzC;AACD,YAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC,mBAAmB,CAAC,eAAe,CAAC,SAAS,CAAC,gBAAgB,EAAE,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;AAClI,YAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC,mBAAmB,CAAC,eAAe,CAAC,SAAS,CAAC,mBAAmB,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;KACrI;;AAED,aAAS,EAAE,qBAAY;AACnB,cAAM,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;AACrE,cAAM,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;AACrE,YAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;AAC7B,YAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;KAChC;;AAED,qBAAiB,EAAE,6BAAY;AAC3B,YAAI,QAAQ,GAAG,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AAC9C,YAAI,MAAM,CAAC,aAAa,CAAC,OAAO,IAAI,QAAQ,EAAE;AAC1C,mBAAO,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SACvD;KACJ;;AAED,kBAAc,EAAE,0BAAY;AACxB,YAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;KACxB;;AAED,sBAAkB,EAAE,8BAAY;AAC5B,YAAI,QAAQ,GAAG,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AAC9C,YAAI,OAAO,GAAG,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC;AAC3C,YAAI,OAAO,GAAG,QAAQ,EAAE;AACpB,gBAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;SAClD,MAAM;AACH,mBAAO,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SACvD;KACJ;;AAED,uBAAmB,EAAE,+BAAY;AAC7B,YAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;AACrB,cAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;KAC7D;CACJ,CAAC,CAAC",
  "file": "unknown",
  "sourcesContent": [
    "const timesMapCoin = [10, 30, 50];\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //    default: null,      // The default value will be used only when the component attaching\r\n        //                           to a node for the first time\r\n        //    url: cc.Texture2D,  // optional, default is typeof default\r\n        //    serializable: true, // optional, default is true\r\n        //    visible: true,      // optional, default is true\r\n        //    displayName: 'Foo', // optional\r\n        //    readonly: false,    // optional, default is false\r\n        // },\r\n        // ...\r\n        retryButton: cc.Node,\r\n        returnButton: cc.Node,\r\n        retryCoinLabel: cc.Label,\r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n        this._uiCtrl = this.getComponent('ui_ctrl');\r\n        this._retryCount = 3 - this._uiCtrl.args.retryCount;\r\n        if (this._retryCount >= 3) {\r\n            this.retryButton.active = false;\r\n            this.returnButton.x = 0;\r\n        } else {\r\n            var needCoin = timesMapCoin[this._retryCount];\r\n            this.retryCoinLabel.string = needCoin;\r\n        }\r\n        this._exchangeHandler = Global.gameEventDispatcher.addEventHandler(GameEvent.ON_EXCHANGE_GOLD, this.onExchangeSuccess.bind(this));\r\n        this._continueHandler = Global.gameEventDispatcher.addEventHandler(GameEvent.ON_BUY_TIME_TO_PLAY, this.onContinueGame.bind(this));\r\n    },\r\n\r\n    onDestroy: function () {\r\n        Global.gameEventDispatcher.removeEventHandler(this._exchangeHandler);\r\n        Global.gameEventDispatcher.removeEventHandler(this._continueHandler);\r\n        this._exchangeHandler = null;\r\n        this._continueHandler = null;\r\n    },\r\n\r\n    onExchangeSuccess: function () {\r\n        var needCoin = timesMapCoin[this._retryCount];\r\n        if (Global.accountModule.goldNum >= needCoin) {\r\n            GameRpc.Clt2Srv.buyTimeToPlayGame(this._retryCount);\r\n        }\r\n    },\r\n\r\n    onContinueGame: function () {\r\n        this._uiCtrl.close();\r\n    },\r\n\r\n    onRetryButtonClick: function () {\r\n        var needCoin = timesMapCoin[this._retryCount];\r\n        var ownCoin = Global.accountModule.goldNum;\r\n        if (ownCoin < needCoin) {\r\n            this._uiCtrl.manager.openUI('coin_not_enough');\r\n        } else {\r\n            GameRpc.Clt2Srv.buyTimeToPlayGame(this._retryCount);\r\n        }\r\n    },\r\n    \r\n    onReturnButtonClick: function () {\r\n        this._uiCtrl.close();\r\n        Global.gameEventDispatcher.emit(GameEvent.ON_RETURN_GAME);\r\n    }\r\n});\r\n"
  ]
}