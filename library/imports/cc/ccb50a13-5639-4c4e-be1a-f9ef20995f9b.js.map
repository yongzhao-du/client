{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "AAAA,IAAM,YAAY,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;;AAElC,EAAE,CAAC,KAAK,CAAC;AACL,eAAS,EAAE,CAAC,SAAS;;AAErB,cAAU,EAAE;;;;;;;;;;;AAWR,mBAAW,EAAE,EAAE,CAAC,IAAI;AACpB,oBAAY,EAAE,EAAE,CAAC,IAAI;KACxB;;;AAGD,UAAM,EAAE,kBAAY;AAChB,YAAI,CAAC,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;AAC5C,YAAI,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC;AAChD,YAAI,IAAI,CAAC,WAAW,IAAI,CAAC,EAAE;AACvB,uBAAW,CAAC,MAAM,GAAG,KAAK,CAAC;AAC3B,wBAAY,CAAC,CAAC,GAAG,GAAG,CAAC;SACxB;KACJ;;AAED,sBAAkB,EAAE,8BAAY;AAC5B,YAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;AACrB,YAAI,QAAQ,GAAG,YAAY,CAAC,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC;AAClD,YAAI,OAAO,GAAG,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC;AAC3C,YAAI,OAAO,GAAG,QAAQ,EAAE;AACpB,gBAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;SAClD,MAAM;AACH,cAAE,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;AACnB,kBAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;SAC5D;KACJ;;AAED,uBAAmB,EAAE,+BAAY;AAC7B,YAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;AACrB,cAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;KAC7D;CACJ,CAAC,CAAC",
  "file": "unknown",
  "sourcesContent": [
    "const timesMapCoin = [10, 30, 50];\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //    default: null,      // The default value will be used only when the component attaching\r\n        //                           to a node for the first time\r\n        //    url: cc.Texture2D,  // optional, default is typeof default\r\n        //    serializable: true, // optional, default is true\r\n        //    visible: true,      // optional, default is true\r\n        //    displayName: 'Foo', // optional\r\n        //    readonly: false,    // optional, default is false\r\n        // },\r\n        // ...\r\n        retryButton: cc.Node,\r\n        returnButton: cc.Node,\r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n        this._uiCtrl = this.getComponent('ui_ctrl');\r\n        this._retryCount = this._uiCtrl.args.retryCount;\r\n        if (this._retryCount <= 0) {\r\n            retryButton.active = false;\r\n            returnButton.x = 150;\r\n        }\r\n    },\r\n\r\n    onRetryButtonClick: function () {\r\n        this._uiCtrl.close();\r\n        var needCoin = timesMapCoin[this._retryCount - 1];\r\n        var ownCoin = GLobal.accountModule.goldNum;\r\n        if (ownCoin < needCoin) {\r\n            this._uiCtrl.manager.openUI('coin_not_enough');\r\n        } else {\r\n            cc.log('do retry');\r\n            Global.gameEventDispatcher.emit(GameEvent.ON_RETRY_GAME);\r\n        }\r\n    },\r\n    \r\n    onReturnButtonClick: function () {\r\n        this._uiCtrl.close();\r\n        Global.gameEventDispatcher.emit(GameEvent.ON_RETURN_GAME);\r\n    }\r\n});\r\n"
  ]
}