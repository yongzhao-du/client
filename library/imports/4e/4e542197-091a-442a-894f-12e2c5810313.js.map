{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "AAAA,IAAM,WAAW,GAAG,OAAO,CAAC,cAAc,CAAC,SAAM,CAAC;;AAElD,EAAE,CAAC,KAAK,CAAC;AACL,eAAS,EAAE,CAAC,SAAS;;AAErB,cAAU,EAAE;AACR,mBAAW,EAAE;AACT,uBAAS,IAAI;AACb,gBAAI,EAAE,EAAE,CAAC,IAAI;SAChB;KACJ;;;AAGD,UAAM,EAAE,kBAAY;AAChB,YAAI,CAAC,MAAM,GAAG,EAAE,CAAC;KACpB;;AAED,UAAM,EAAE,gBAAU,IAAI,EAAE,IAAI,EAAE;AAC1B,YAAI,IAAI,GAAG,IAAI,CAAC;AACnB,UAAE,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,GAAG,IAAI,EAAE,EAAE,CAAC,MAAM,EAAE,UAAU,GAAG,EAAE,MAAM,EAAE;AACrE,gBAAI,IAAI,GAAG,EAAE,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;AAClC,gBAAI,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAChC,gBAAI,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;AACxC,gBAAI,CAAC,EAAE,GAAG,EAAE,CAAC;AACb,gBAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACjB,gBAAI,CAAC,OAAO,GAAG,IAAI,CAAC;AACpB,gBAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;SACnC,CAAC,CAAC;KACH;;AAED,WAAO,EAAE,iBAAU,IAAI,EAAE;AACxB,aAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACzC,gBAAI,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE;AACxB,oBAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACzB,oBAAI,IAAI,CAAC,OAAO,EAAE;AACd,wBAAI,CAAC,OAAO,EAAE,CAAC;iBAClB;AACD,sBAAM;aACT;SACD;KACJ;;AAED,YAAQ,EAAE,oBAAY;AAClB,eAAO,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;AAC3B,gBAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;AAC7B,gBAAI,IAAI,CAAC,OAAO,EAAE;AACd,oBAAI,CAAC,OAAO,EAAE,CAAC;aAClB;SACJ;KACJ;;CAEJ,CAAC,CAAC",
  "file": "unknown",
  "sourcesContent": [
    "const BufferTable = require('buffer_table').class;\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        uiContainer: {\r\n            default: null,\r\n            type: cc.Node\r\n        }\r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n        this._table = [];\r\n    },\r\n    \r\n    openUI: function (name, args) {\r\n        var self = this;\r\n    \tcc.loader.loadRes('prefab/ui/' + name, cc.Prefab, function (err, prefab) {\r\n    \t    var node = cc.instantiate(prefab);\r\n    \t    var id = self._table.push(node);\r\n    \t    var ctrl = node.getComponent('ui_ctrl');\r\n    \t    ctrl.id = id;\r\n    \t    ctrl.args = args;\r\n    \t    ctrl.manager = self;\r\n    \t    self.uiContainer.addChild(node);\r\n    \t});\r\n    },\r\n    \r\n    closeUI: function (node) {\r\n    \tfor (var i = 0; i < this._table.length; i++) {\r\n    \t    if (node == this._table[i]) {\r\n    \t        this._table.splice(i, 1);\r\n    \t        if (node.isValid) {\r\n    \t            node.destroy();\r\n    \t        }\r\n    \t        break;\r\n    \t    }\r\n        }\r\n    },\r\n    \r\n    closeAll: function () {\r\n        while (this._table.length > 0) {\r\n            var node = this._table.pop();\r\n            if (node.isValid) {\r\n                node.destroy();\r\n            }\r\n        }\r\n    },\r\n    \r\n});\r\n"
  ]
}